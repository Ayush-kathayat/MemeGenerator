{"ast":null,"code":"import _toConsumableArray from\"C:/Programming stuff/MemeGenerator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Programming stuff/MemeGenerator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Programming stuff/MemeGenerator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";// import { useDispatch } from \"react-redux\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Meme=function Meme(_ref){var meme=_ref.meme,setMeme=_ref.setMeme;var _useState=useState({template_id:meme.id,username:\"RituGupta\",password:\"Ritu@123\",boxes:[]}),_useState2=_slicedToArray(_useState,2),form=_useState2[0],setForm=_useState2[1];var generatememe=function generatememe(){var url=\"https://api.imgflip.com/caption_image?template_id=\".concat(form.template_id,\"&username=\").concat(form.username,\"&password=\").concat(form.password);form.boxes.map(function(box,index){return url+=\"&boxes[\".concat(index,\"][text]=\").concat(box.text);});console.log(url);fetch(url).then(function(res){return res.json();}).then(function(data){if(data.success===true){setMeme(_objectSpread(_objectSpread({},meme),{},{url:data.data.url}));}else{alert(\"Enter Some Text\");}});};// const save = () => {\n//     console.log(meme.url);\n// }\nfunction save(){var xhr=new XMLHttpRequest();var url=meme.url;xhr.open(\"GET\",url,true);xhr.responseType=\"blob\";xhr.onload=function(){var urlCreator=window.URL||window.webkitURL;var imageUrl=urlCreator.createObjectURL(this.response);var tag=document.createElement('a');tag.href=imageUrl;tag.download=\"meme\";document.body.appendChild(tag);tag.click();document.body.removeChild(tag);};xhr.send();}return/*#__PURE__*/_jsxs(\"div\",{className:\"memebnao\",children:[/*#__PURE__*/_jsx(\"img\",{src:meme.url,alt:\"meme\"}),/*#__PURE__*/_jsx(\"div\",{children:_toConsumableArray(Array(meme.box_count)).map(function(_,index){return/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"meme caption-\".concat(index+1),onChange:function onChange(e){var newBox=form.boxes;newBox[index]={text:e.target.value};setForm(_objectSpread(_objectSpread({},form),{},{boxes:newBox}));}},index);})}),/*#__PURE__*/_jsxs(\"div\",{className:\"btns\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\" \",/*#__PURE__*/_jsx(\"button\",{className:\"backbtn\",title:\"Back\",onClick:function onClick(){setMeme(null);},children:\"Back\"})]}),/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"generatebutton\",onClick:generatememe,children:\"Generate Meme\"})}),/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"generatebutton\",onClick:save,children:\"Save\"})})]})]});};export default Meme;","map":{"version":3,"sources":["C:/Programming stuff/MemeGenerator/src/THA-22/Meme.jsx"],"names":["useState","Meme","meme","setMeme","template_id","id","username","password","boxes","form","setForm","generatememe","url","map","box","index","text","console","log","fetch","then","res","json","data","success","alert","save","xhr","XMLHttpRequest","open","responseType","onload","urlCreator","window","URL","webkitURL","imageUrl","createObjectURL","response","tag","document","createElement","href","download","body","appendChild","click","removeChild","send","Array","box_count","_","e","newBox","target","value"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\n// import { useDispatch } from \"react-redux\";\r\n\r\nconst Meme = ({ meme, setMeme }) => {\r\n    const [form, setForm] = useState({\r\n        template_id: meme.id,\r\n        username: \"RituGupta\",\r\n        password: \"Ritu@123\",\r\n        boxes: [],\r\n\r\n    });\r\n\r\n    const generatememe = () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box, index) => {\r\n            return (url += (`&boxes[${index}][text]=${box.text}`));\r\n        });\r\n        console.log(url)\r\n        fetch(url).then((res) => res.json())\r\n            .then((data) => {\r\n                if (data.success === true) {\r\n                    setMeme({ ...meme, url: data.data.url })\r\n\r\n                } else {\r\n                    alert(\"Enter Some Text\");\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    // const save = () => {\r\n\r\n    //     console.log(meme.url);\r\n    // }\r\n    function save() {\r\n        var xhr = new XMLHttpRequest();\r\n        var url = meme.url;\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.responseType = \"blob\";\r\n        xhr.onload = function () {\r\n            var urlCreator = window.URL || window.webkitURL;\r\n            var imageUrl = urlCreator.createObjectURL(this.response);\r\n            var tag = document.createElement('a');\r\n            tag.href = imageUrl;\r\n            tag.download = \"meme\";\r\n            document.body.appendChild(tag);\r\n            tag.click();\r\n            document.body.removeChild(tag);\r\n        }\r\n        xhr.send();\r\n    }\r\n    return (\r\n        <div className=\"memebnao\">\r\n            <img src={meme.url} alt=\"meme\"></img>\r\n\r\n            <div>\r\n                {[...Array(meme.box_count)].map((_, index) => (\r\n                    <input\r\n                        key={index}\r\n                        type=\"text\"\r\n                        placeholder={`meme caption-${index + 1}`}\r\n                        onChange={(e) => {\r\n\r\n                            const newBox = form.boxes;\r\n                            newBox[index] = { text: e.target.value };\r\n                            setForm({ ...form, boxes: newBox });\r\n                        }}>\r\n\r\n                    </input>))}\r\n            </div>\r\n\r\n            <div className=\"btns\">\r\n                <span> <button className=\"backbtn\" title=\"Back\" onClick={() => { setMeme(null) }}>Back</button></span>\r\n                <span><button className=\"generatebutton\" onClick={generatememe}>Generate Meme</button></span>\r\n                <span><button className=\"generatebutton\" onClick={save} >Save</button></span>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Meme;"]},"metadata":{},"sourceType":"module"}
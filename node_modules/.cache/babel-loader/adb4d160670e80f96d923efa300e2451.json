{"ast":null,"code":"var _jsxFileName = \"C:\\\\Programming stuff\\\\MemeGenerator\\\\src\\\\THA-22\\\\Meme.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // import { useDispatch } from \"react-redux\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Meme = ({\n  meme,\n  setMeme\n}) => {\n  _s();\n\n  const [form, setForm] = useState({\n    template_id: meme.id,\n    username: \"RituGupta\",\n    password: \"Ritu@123\",\n    boxes: []\n  });\n\n  const generatememe = () => {\n    let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\n    form.boxes.map((box, index) => {\n      return url += `&boxes[${index}][text]=${box.text}`;\n    });\n    console.log(url);\n    fetch(url).then(res => res.json()).then(data => {\n      if (data.success === true) {\n        setMeme({ ...meme,\n          url: data.data.url\n        });\n      } else {\n        alert(\"Enter Some Text\");\n      }\n    });\n  }; // const save = () => {\n  //     console.log(meme.url);\n  // }\n\n\n  function save() {\n    var xhr = new XMLHttpRequest();\n    var url = meme.url;\n    xhr.open(\"GET\", url, true);\n    xhr.responseType = \"blob\";\n\n    xhr.onload = function () {\n      var urlCreator = window.URL || window.webkitURL;\n      var imageUrl = urlCreator.createObjectURL(this.response);\n      var tag = document.createElement('a');\n      tag.href = imageUrl;\n      tag.download = \"meme\";\n      document.body.appendChild(tag);\n      tag.click();\n      document.body.removeChild(tag);\n    };\n\n    xhr.send();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memebnao\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: meme.url,\n      alt: \"meme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [...Array(meme.box_count)].map((_, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: `meme caption-${index + 1}`,\n        onChange: e => {\n          const newBox = form.boxes;\n          newBox[index] = {\n            text: e.target.value\n          };\n          setForm({ ...form,\n            boxes: newBox\n          });\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btns\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"backbtn\",\n          title: \"Back\",\n          onClick: () => {\n            setMeme(null);\n          },\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generatebutton\",\n          onClick: generatememe,\n          children: \"Generate Meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generatebutton\",\n          onClick: save,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Meme, \"sMovFBOAAYvDj3VT3RVtozmH34w=\");\n\n_c = Meme;\nexport default Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["C:/Programming stuff/MemeGenerator/src/THA-22/Meme.jsx"],"names":["useState","Meme","meme","setMeme","form","setForm","template_id","id","username","password","boxes","generatememe","url","map","box","index","text","console","log","fetch","then","res","json","data","success","alert","save","xhr","XMLHttpRequest","open","responseType","onload","urlCreator","window","URL","webkitURL","imageUrl","createObjectURL","response","tag","document","createElement","href","download","body","appendChild","click","removeChild","send","Array","box_count","_","e","newBox","target","value"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\n// import { useDispatch } from \"react-redux\";\r\n\r\nconst Meme = ({ meme, setMeme }) => {\r\n    const [form, setForm] = useState({\r\n        template_id: meme.id,\r\n        username: \"RituGupta\",\r\n        password: \"Ritu@123\",\r\n        boxes: [],\r\n\r\n    });\r\n\r\n    const generatememe = () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box, index) => {\r\n            return (url += (`&boxes[${index}][text]=${box.text}`));\r\n        });\r\n        console.log(url)\r\n        fetch(url).then((res) => res.json())\r\n            .then((data) => {\r\n                if (data.success === true) {\r\n                    setMeme({ ...meme, url: data.data.url })\r\n\r\n                } else {\r\n                    alert(\"Enter Some Text\");\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    // const save = () => {\r\n\r\n    //     console.log(meme.url);\r\n    // }\r\n    function save() {\r\n        var xhr = new XMLHttpRequest();\r\n        var url = meme.url;\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.responseType = \"blob\";\r\n        xhr.onload = function () {\r\n            var urlCreator = window.URL || window.webkitURL;\r\n            var imageUrl = urlCreator.createObjectURL(this.response);\r\n            var tag = document.createElement('a');\r\n            tag.href = imageUrl;\r\n            tag.download = \"meme\";\r\n            document.body.appendChild(tag);\r\n            tag.click();\r\n            document.body.removeChild(tag);\r\n        }\r\n        xhr.send();\r\n    }\r\n    return (\r\n        <div className=\"memebnao\">\r\n            <img src={meme.url} alt=\"meme\"></img>\r\n\r\n            <div>\r\n                {[...Array(meme.box_count)].map((_, index) => (\r\n                    <input\r\n                        key={index}\r\n                        type=\"text\"\r\n                        placeholder={`meme caption-${index + 1}`}\r\n                        onChange={(e) => {\r\n\r\n                            const newBox = form.boxes;\r\n                            newBox[index] = { text: e.target.value };\r\n                            setForm({ ...form, boxes: newBox });\r\n                        }}>\r\n\r\n                    </input>))}\r\n            </div>\r\n\r\n            <div className=\"btns\">\r\n                <span> <button className=\"backbtn\" title=\"Back\" onClick={() => { setMeme(null) }}>&#8592;</button></span>\r\n                <span><button className=\"generatebutton\" onClick={generatememe}>Generate Meme</button></span>\r\n                <span><button className=\"generatebutton\" onClick={save} >Save</button></span>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Meme;"]},"metadata":{},"sourceType":"module"}